---
---

## Pandas

If you have used the statistical programming language R, you are familiar with
*data frames*, two-dimensional data structures where each column can hold a 
different type of data, as in a spreadsheet.

The data analysis library **pandas** provides a data frame object type for
Python, along with functions to subset, filter reshape and aggregate data
stored in data frames.

===

After importing pandas, we call its `read_csv` function to load the Portal 
surveys data from the file `surveys.csv`.

```{python, term=False}
import pandas as pd
surveys = pd.read_csv("data/surveys.csv")
```
```{python}
surveys.head()
```

The `head(n=5)` method of a data frame returns its first `n` rows.

===

There are many ways to slice a Pandas DataFrame.
To select a subset of rows and/or columns by name, use the `loc` attribute and `[` for indexing.

```{python}
surveys.loc[:, ['plot_id', 'species_id']]
```

===

As with lists, `:` by itself indicates all the rows (or columns). Unlike lists, the `loc` attribute returns both endpoints of a slice.

```{python}
surveys.loc[2:4, 'plot_id':'sex']
```

===

Use the `iloc` attribute of a DataFrame to get rows and/or columns by position, which behaves identically to list indexing.

```{python}
surveys.iloc[2:4, 4:6]
```

===

The default indexing for a DataFrame, without using the `loc` or `iloc` attributes, is by column name.

```{python}
surveys[['hindfoot_length', 'weight']].describe()
```

===

The `loc` attribute also allows logical indexing, i.e. the use of a boolean array of appropriate length for the selected dimension.

The subset of `surveys` where the species is "DM" is extracted into a new data frame.

```{python, term=False}
surveys_dm = surveys.loc[surveys['species_id'] == 'DM', ]
```
```{python}
surveys_dm.head()
```

===

The `query()` method accepts an expression that may reference columns, increasing the readability of the same operation

```{python, term=False}
surveys_dm = surveys.query('species_id == "DM"')
```
```{python}
surveys_dm.head()
```

===

Aggregation of records in a DataFrame by value of a given variable is performed with the `groupby()` method. The resulting "grouped" DataFrame has additional methods (like `mean()`) that summarize each group, producing a DataFrame with one record for each group.

```{python, term=False}
dm_stats = (
  surveys_dm
  .groupby('sex')
  ['hindfoot_length', 'weight']
  .mean()
  )
```
```{python}
dm_stats
```

===

## Exercise 6

The `count` method for DataFrames (e.g. `surveys.count()`) returns the number of rows
in a data frame. Find out which month had the most observations recorded
in `surveys`.
