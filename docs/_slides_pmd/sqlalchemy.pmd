---
---

## SQLAlchemy

Working with databases from a high level programming language (Python or R) is usually a one way street: the language helps with complicated queries for pulling out data, but provides little assistance with pushing data back, especially for complicated modifications. SQLAlchemy lays the groundwork for bi-directional flow: Python objects become synchronized with database records.

After some upfront alignment between the Portal Mammals database in PostgreSQL and a Python environment, we'll be ready to go.

```{python, term=False}
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine

# Create the canvas for a map between Python objects and database records
Base = automap_base()

# Identify database, create the map from the schema, and prepare to create sessions
engine = create_engine('postgresql+pygresql://@localhost/portal')
Base.prepare(engine, reflect=True)
Session = sessionmaker(bind=engine)
```

===

## Object Relational Mapper (ORM)

The ORM sets up a link between Python objects and records in a database. You could think of a table as defining
a class or data structure, in which each field corresponds to an attribute. Each record corresponds to an instance of the class.

```{python}
Base.classes.keys()
```

The `Base` class contains a list of tables that `automap_base()` found in the PostgreSQL database.

===

Pull class definitions directly from the `Base` after it has been prepared.

```{python, term=False}
Plots = Base.classes['plots']
Animals = Base.classes['animals']
```

===

Then create a new instance by calling the class "constructor" with values specified for each field.

```{python}
plot = Plots(treatment='Control')
plot.id
```

Note that `plot.id` is empty. We did not specify a value for `id` because we don't know what values would duplicate an existing primary key.

===

## Session

Connections to the database are made within a "session", as a safety protocol that protects against network disruptions and provides a `session.rollback()` method of aborting changes. After adding the new `plot` object to a session and commiting the change, the database and Python environments are synched.

```{python, term=False}
session = Session()
session.add(plot)
session.commit()
```

```{python}
plot.id
```

The RDBMS inserted a new record, incrementing the `id` value as designed, and this is reflected back into the object `plot`.

===

## Relations

The full reach of the ORM extends into relationships between tables.

Let's pull a different `plot` record using the `session.query()` method.

```{python, term=False}
query = session.query(Plots)
plot = query.first()
```

Not only do we have the plot attributes

```{python}
plot.id
plot.treatment
```

... we have the list of every `animal` linked to this `plot` by the many-to-one relationship dictated by the use of foreign keys.

```{python}
plot.animals_collection
```

===

## Update

Programatically make complex updates to the data in Python, then commit everything to the database
in one transaction.

Suppose a surveyor mistakenly reversed the labels of two plots during a particul survey, and the database needs to be corrected.

```{python, term=False}
plot_a = session.query(Plots).filter_by(id=2).one()
plot_b = session.query(Plots).filter_by(id=12).one()

query = session.query(Animals).filter_by(year=2002, month=1, day=12)
animals_a = query.filter(Animals.plot == plot_a).all()
animals_b = query.filter(Animals.plot == plot_b).all()
```

```{python}
animals_a[0].plots is plot_a
```

To swap the plots associated with all these animal records, assign the opposite plot to each `animal.plot` attribute.

```{python, term=False}
for animal in animals_a:
    animal.plot = plot_b
for animal in animals_b:
    animal.plot = plot_a
```

```{python}
animals_a[0].plot is plot_b
```

```{python, term = False}
session.commit()
```

```{python}
animals_a[0].plot is plot_b
```

===

## Query

At any time, collect the result of a SQLAlchemy query into a data fram

```{python, term=False}
query = (session
    .query(Animals)
    .join(Species)
    .filter_by(taxa='Rodent')
    )
rodents = pd.read_sql(query.statement, engine)
```

```{python}
rodents.head()
```
