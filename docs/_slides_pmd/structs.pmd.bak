---
---

## Data structures

The built-in structures for holding multiple values are:

- Tuple
- List
- Set
- Dictionary

===

## Tuple

The simplest kind of sequence, a tuple is declared with comma-separated values inside `()`, as we have already seen, or in nothing at all. Note that to declare a one-tuple, a trailing "," is required.

```{python}
t = 'cat',
type(t)
```

===

## List

The more common kind of sequence in Python is the list, which is declared with comma-separated values inside `[]`. Unlike a tuple, a list is mutable.

```{python}
l = [3.14, 'xyz', t]
type(l)
```

===

## Subsetting with `[]`

Subsetting elements from a tuple or list is performed with square brackets in both cases, and selects elements using their integer position starting from zero---their "index".

```{python}
l[0]
```

===

Negative indices are allowed, and refer to the reverse ordering: -1 is the last item in the list, -2 the second-to-last item, and so on.

```{python}
l[-1]
```

===

The syntax `l[i:j]` selects a sub-list starting with the element at index
`i` and ending with the element at index `j - 1`.

```{python}
l[0:2]
```

A blank space before or after the ":" indicates the start or end of the list,
respectively. For example, the previous example could have been written 
`l[:2]`.

===

A potentially useful trick to remember the list subsetting rules in Python is
to picture the indices as "dividers" between list elements.

```
 0      1       2          3 
 | 3.14 | 'xyz' | ('cat',) |
-3     -2      -1
```
{:.input}

Positive indices are written at the top and negative indices at the bottom. 
`l[i]` returns the element to the right of `i` whereas `l[i:j]` returns
elements between `i` and `j`.

===

## Exercise 2

Create a Python list containing zero as a float, the integer 2, and a tuple of three separate characters. Now, assume you did not know the length of the list and extract the last two elements.

===

## Set

The third and last "sequence" data structure is the set, used mainly for quick access to set operations like "union" and "difference". Declare a set with comma-separated values inside `{}` or by casting another sequence with `set()`.

```{python}
s = set(l)
```

```{python}
s.difference({3.14})
```

Python is a principled language: a set is technically unordered, so its elements do not have an index. You cannot subset a set using `[]`.

===

## Dictionary

Lists are useful when you need to access elements by their position in a
sequence. In contrast, a dictionary is needed to find values based on arbitrary sets of unique identifiers.

Construct a dictionary with comma-separated `key:value` pairs in `{}`.

```{python, term=False}
animals = {'Snowy':'dog', 'Garfield':'cat', 'Bugs':'rabbit'}
```
```{python}
type(animals)
```

===

Individual values are accessed using square brackets, as for lists, but the key must be used rather than an index.

```{python}
animals['Bugs']
```

===

To add a single new element to the dictionary, define a new `key:value` pair by assigning a value to a novel key in the dictionary.

```{python}
animals['Lassie'] = 'dog'
animals
```

Dictionary keys are unique. Assigning a value to an existing key overwrites its previous value.

===

## Exercise 3

Based on what we have learned so far about lists and dictionaries, think up a data structure suitable for an address book. Using what you come up with, store the contact information (i.e. the name and email address) of three or four (hypothetical) persons as a variable `addr`.









===

## Dictionary methods

The `update()` method allows you to extend a dictionary with multiple new `key:value` pairs, or simultaneously overwrite existing ones.

```{python, term=False}
animals.update(
  Tweety='bird',
  Bob='sponge',
  )
```

===

Note a couple "pythonic" style elements of the above:

1. Leave no space around the `=` when using keyword arguments.
1. Trailing null arguments are syntactically correct, even advantageous.
1. White space between `(` and `)` is ignored.

===

An alternative method of calling the `update()` method reveals the full
flexibility of dictionaries. The keys can be any object, and different types of keys
can coexist in a single dictionary.

```{python, term=False}
animals.update({
  3.14:'pie',
  u'\U0001F98A':'Mr. Fox',
  })
```










## List methods

The Python language includes multiple functions defined just for lists. Any function "attached" to an
object by a `.` is known as a "method" of that object's type.

```{python, term=False}
i = l.index('three')
```

===

The `index()` function is a method for the object of type `type(l)`. All the objects methods
are easy to learn about.

```{python}
dir(l)
```

===

The help documentaion is attached to the method, no matter what you have called the object.

```{python}
help(l.append)
```

===

```{python, term=False}
l.append(100)
```
```{python}
l
```

===

## Exercise 2

Find and use the method for `l` that arranges its elements in the opposite order.

===

Python is "object-oriented" in that everything beyond the basic data types (e.g. `int`, `str`, etc.) is called an object. It is equally if not more common to use functions that are methods of objects than to use functions that are independent of any object, although even "object-oriented" programming uses these regularly:

```{python}
len(l)
```

The function `len` is not a method and accepts different classes of object as its argument.

```{python}
len('Hello, World!')
```

